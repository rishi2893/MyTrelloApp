/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Button = ReactBootstrap.Button;
var MenuItem = ReactBootstrap.MenuItem;
var SplitButton = ReactBootstrap.SplitButton;
var Jumbotron = ReactBootstrap.Jumbotron;
var Grid = ReactBootstrap.Grid;
var Row = ReactBootstrap.Row;
var Col = ReactBootstrap.Col;
var Navbar = ReactBootstrap.Navbar;
var Board = React.createClass({
  render: function() {

    //console.log(this.props.board_name);
    return (
      <div className="board">
          <Col md={3} >
            < SplitButton href={"/MyTrello/" + this.props.board_number} bsStyle="info" bsSize="large" title={this.props.board_name} >
              <MenuItem eventKey="1">Delete Board</MenuItem>
              <MenuItem eventKey="2">Edit Board Name</MenuItem>
            </SplitButton>
        </Col>
      </div>
    );
  }
});

var BoardBox = React.createClass({
  loadBoardsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleBoardSubmit: function(board) {
    var boards = this.state.data;

    //console.log("#########");
    // Optimistically set an id on the new board. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    board.id = Date.now();
    var newBoards = boards.concat([board]);
    this.setState({data: newBoards});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: board,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: boards});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadBoardsFromServer();
    setInterval(this.loadBoardsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="boardBox">
        <Navbar inverse>
          <Navbar.Header>
            <Navbar.Brand>
              <a href="">MyTrelloApp</a>
            </Navbar.Brand>
            <Navbar.Toggle/>
          </Navbar.Header>
        </Navbar>
        <Grid>
          <h1>My Board(s):</h1>
            <BoardList data={this.state.data} />
            <BoardForm onBoardSubmit={this.handleBoardSubmit} />
        </Grid>
      </div>
    );
  }
});

var BoardList = React.createClass({
  render: function() {

    //console.log(this.props.data);

    var boardNodes = this.props.data.map(function(board) {
      return (
        <Board board_name={board.board_name} key={board.id} board_number={board.id}>
        </Board>
      );
    });
    return (
      <div className="boardList">
        {boardNodes}
      </div>
    );
  }
});

var BoardForm = React.createClass({
  getInitialState: function() {
    return {board_name: ''};
  },
  handleBoardNameChange: function(e) {
    this.setState({board_name: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var board_name = this.state.board_name.trim();
    if (!board_name) {
      return;
    }
    this.props.onBoardSubmit({board_name: board_name, csrfmiddlewaretoken: csrftoken});
    this.setState({board_name: ''});
  },
  render: function() {
    return (
      <form className="boardForm" onSubmit={this.handleSubmit}>

      <Button>
        <input
          type="text"
          placeholder="Create a Board.."
          value={this.state.board_name}
          onChange={this.handleBoardNameChange}
        />
      </Button>
      </form>
    );
  }
});

ReactDOM.render(
  <BoardBox url="/MyTrello/boards/" pollInterval={2000} />,
  document.getElementById('index_content')
);
