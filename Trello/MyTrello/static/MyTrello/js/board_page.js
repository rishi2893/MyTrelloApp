/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Button = ReactBootstrap.Button;
var Card = React.createClass({
  render: function() {

    //console.log(this.props.card_name);
    return (
      <div className="card">
        <h2 className="cardName">
          <Button bsStyle="primary" bsSize="large">{this.props.card_name}</Button>
          <ListBox url={"/MyTrello/lists/" + this.props.cardnumber + "/" } pollInterval={2000} />
        </h2>
      </div>
    );
  }
});

var CardBox = React.createClass({
  loadCardsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCardSubmit: function(card) {
    var cards = this.state.data;

    //console.log("#########");
    // Optimistically set an id on the new card. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    card.id = Date.now();
    var newCards = cards.concat([card]);
    this.setState({data: newCards});
    console.log('Submitting post data')
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: card,
      success: function(data) {
        this.setState({data: data});
        console.log(data);
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: cards});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCardsFromServer();
    setInterval(this.loadCardsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="cardBox">
        <h1>Welcome to Board:{this.props.board_name} </h1>
        <CardList data={this.state.data} />
        <CardForm onCardSubmit={this.handleCardSubmit} />
      </div>
    );
  }
});

var CardList = React.createClass({
  render: function() {

    //console.log(this.props.data);

    var cardNodes = this.props.data.map(function(card) {
      return (
        <Card card_name={card.card_name} key={card.id} cardnumber={card.id}>
        </Card>
      );
    });
    return (
      <div className="cardList">
        {cardNodes}
      </div>
    );
  }
});

var CardForm = React.createClass({
  getInitialState: function() {
    return {card_name: ''};
  },
  handleCardNameChange: function(e) {
    this.setState({card_name: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var card_name = this.state.card_name.trim();
    if (!card_name) {
      return;
    }
    this.props.onCardSubmit({card_name: card_name, csrfmiddlewaretoken: csrftoken});
    this.setState({card_name: ''});
  },
  render: function() {
    return (
      <form className="cardForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Add Card..."
          value={this.state.card_name}
          onChange={this.handleCardNameChange}
        />
        <input type="submit" value="Submit" />
      </form>
    );
  }
});

var List = React.createClass({
  render: function() {

    //console.log(this.props.list_name);
    return (
      <div className="list">
        <h2 className="listName">
          <ul>
          <li>{this.props.list_name}</li>
          </ul>
        </h2>
      </div>
    );
  }
});

var ListBox = React.createClass({
  loadListsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleListSubmit: function(list) {
    var lists = this.state.data;

    //console.log("#########");
    // Optimistically set an id on the new list. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    list.id = Date.now();
    var newLists = lists.concat([list]);
    this.setState({data: newLists});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: list,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: lists});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadListsFromServer();
    setInterval(this.loadListsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="listBox">
        <ListList data={this.state.data} />
        <ListForm onListSubmit={this.handleListSubmit} />
      </div>
    );
  }
});

var ListList = React.createClass({
  render: function() {

    //console.log(this.props.data);

    var listNodes = this.props.data.map(function(list) {
      return (
        <List list_name={list.list_name} key={list.id}>
        </List>
      );
    });
    return (
      <div className="listList">
        {listNodes}
      </div>
    );
  }
});

var ListForm = React.createClass({
  getInitialState: function() {
    return {list_name: ''};
  },
  handleListNameChange: function(e) {
    this.setState({list_name: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var list_name = this.state.list_name.trim();
    if (!list_name) {
      return;
    }
    this.props.onListSubmit({list_name: list_name, csrfmiddlewaretoken: csrftoken});
    this.setState({list_name: ''});
  },
  render: function() {
    return (
      <form className="listForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Add List.."
          value={this.state.list_name}
          onChange={this.handleListNameChange}
        />
        <input type="submit" value="Submit" />
      </form>
    );
  }
});

ReactDOM.render(
  <CardBox url={"/MyTrello/cards/" + boardid + "/"} pollInterval={2000} board_name={boardname} />,
  document.getElementById('board_content')
);
