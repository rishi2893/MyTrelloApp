/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Button = ReactBootstrap.Button;
var MenuItem = ReactBootstrap.MenuItem;
var SplitButton = ReactBootstrap.SplitButton;
var Jumbotron = ReactBootstrap.Jumbotron;
var Grid = ReactBootstrap.Grid;
var Row = ReactBootstrap.Row;
var Col = ReactBootstrap.Col;
var Navbar = ReactBootstrap.Navbar;
var Modal = ReactBootstrap.Modal;
var ModalBody = ReactBootstrap.ModalBody;
var Card = React.createClass({
  render: function() {

    //console.log(this.props.card_name);
    return (
      <div className="card">
        <h2 className="cardName"></h2>
        <Col md={3}>
          <Jumbotron>
          <h4> <b>{this.props.card_name}</b></h4>
            <ListBox url={"/MyTrello/lists/" + this.props.cardnumber + "/" } pollInterval={2000} />
          </Jumbotron>

        </Col>
      </div>
    );
  }
});

var CardBox = React.createClass({
  loadCardsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCardSubmit: function(card) {
    var cards = this.state.data;

    //console.log("#########");
    // Optimistically set an id on the new card. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    card.id = Date.now();
    var newCards = cards.concat([card]);
    this.setState({data: newCards});
    console.log('Submitting post data')
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: card,
      success: function(data) {
        this.setState({data: data});
        console.log(data);
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: cards});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCardsFromServer();
    setInterval(this.loadCardsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="cardBox">
        <Navbar inverse>
          <Navbar.Header>
            <Navbar.Brand>
              <a href="/MyTrello">MyTrelloApp</a>
            </Navbar.Brand>
            <Navbar.Toggle/>
          </Navbar.Header>
        </Navbar>
        <Grid>
          <h1>Welcome to Board:{this.props.board_name} </h1>
            <CardList data={this.state.data} />
            <CardForm onCardSubmit={this.handleCardSubmit} />
        </Grid>
      </div>
    );
  }
});

var CardList = React.createClass({
  render: function() {

    //console.log(this.props.data);

    var cardNodes = this.props.data.map(function(card) {
      return (
        <Card card_name={card.card_name} key={card.id} cardnumber={card.id}>
        </Card>
      );
    });
    return (
      <div className="cardList">
        {cardNodes}
      </div>
    );
  }
});

var CardForm = React.createClass({
  getInitialState: function() {
    return {card_name: ''};
  },
  handleCardNameChange: function(e) {
    this.setState({card_name: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var card_name = this.state.card_name.trim();
    if (!card_name) {
      return;
    }
    this.props.onCardSubmit({card_name: card_name, csrfmiddlewaretoken: csrftoken});
    this.setState({card_name: ''});
  },
  render: function() {
    return (
      <form className="cardForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Add a Card..."
          value={this.state.card_name}
          onChange={this.handleCardNameChange}
        />
      </form>
    );
  }
});

var List = React.createClass({
  getInitialState: function(){
    return {urldel:"/MyTrello/removed_lists/" + this.props.list_number,
            urledit:"/MyTrello/edited_lists/" + this.props.list_number, show1: false, show2: false}
  },
  handleShow: function(){
    this.setState({show1: true});
  },
  handleEdit: function(){
    this.setState({show2: true});
  },
  handleRemove: function(){
    $.ajax({
      url: this.state.urldel,
      dataType: 'json',
      data: this.props.list_number,
      success: function (data) {
        this.setState({data: data});
      }.bind(this),
      error: function (xhr, status, err) {
        this.setState({data: this.props.list_number});
        console.error(this.state.urldel, status, err.toString());
      }.bind(this),
    });
    
  },
  handleListChangeSubmit: function(list){
    console.log("Im here");
    console.log(list.list_name);
    console.log(list.created_by);
    $.ajax({
      url: this.state.urledit,
      dataType: 'json',
      data: list,
      type: 'POST',
      success: function (data) {
        console.log("Success");
        this.setState({data: data});
      }.bind(this),
      error: function (xhr, status, err) {
        this.setState({data: list});
        console.error(this.state.urledit, status, err.toString());
      }.bind(this),
    });
  },
  render: function() {
    let close1 = () => this.setState({ show1: false});
    let close2 = () => this.setState({ show2: false});
    
    //console.log(this.props.list_name);
    return (
      <div className="list">
        <h2 className="listName"></h2>
         <SplitButton onClick={this.handleShow} bsStyle="primary" bsSize="large" title={this.props.list_name}>
            <MenuItem eventKey="1" onClick={this.handleEdit}>Edit Details</MenuItem>
            <MenuItem eventKey="2" onClick={this.handleRemove}>Delete Task</MenuItem>
         </SplitButton>
         
         <Modal
          show={this.state.show1}
          onHide={close1}
          container={this}
          aria-labelledby="contained-modal-title"
        >
          <Modal.Header closeButton>
            <Modal.Title id="contained-modal-title">Details: {this.props.list_name}</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <h4>Description: {this.props.list_description}</h4>
            <h4>Created By: {this.props.created_by}</h4>
            <h4>Create Date: {this.props.create_date}</h4>
            <h4>Due Date: {this.props.due_date}</h4>
          </Modal.Body>
          <Modal.Footer>
            <Button onClick={close1}>Close</Button>
          </Modal.Footer>
        </Modal>
        
        <Modal
          show={this.state.show2}
          onHide={close2}
          container={this}
          aria-labelledby="contained-modal-title"
        >
          <Modal.Header closeButton>
            <Modal.Title id="contained-modal-title">Edit Task: {this.props.list_name}</Modal.Title>
          </Modal.Header>
          <Modal.Body>
              <NewListName  list_name = {this.props.list_name}
              onListChangeSubmit={this.handleListChangeSubmit} list_description = {this.props.list_description}
              create_date = {this.props.create_date} due_date = {this.props.due_date}
              created_by = {this.props.created_by}/>
          </Modal.Body>
          <Modal.Footer>
            <Button onClick={close2}>Close</Button>
          </Modal.Footer>
        </Modal>
        
      </div>
    );
  }
});
var NewListName = React.createClass({
  getInitialState: function () {
    return {list_name:  this.props.list_name, list_description: this.props.list_description,
    create_date: this.props.create_date, created_by: this.props.created_by, due_date: this.props.due_date}
  },
  handleListNameChange: function(e){
    this.setState({list_name: e.target.value })
  },
  handleDescriptionChange: function(e){
    this.setState({list_description: e.target.value })
  },
  handleCreateByChange: function(e){
    this.setState({created_by: e.target.value })
  },
  handleDueDateChange: function(e){
    this.setState({due_date: e.target.value })
  },
  handleListModify: function (e) {
    e.preventDefault();
    var list_name = this.state.list_name.trim();
    var list_description = this.state.list_description.trim();
    var created_by = this.state.created_by.trim();
    var due_date = this.state.due_date.trim();
    this.props.onListChangeSubmit({list_name: list_name, list_description: list_description,
                                   created_by: created_by, due_date: due_date,csrfmiddlewaretoken: csrftoken});
  },
  render: function () {
    return(
    <form className="newListName" onSubmit={this.handleListModify}>
      <h4><input
          type="text"
          placeholder="Rename Task.."
          value={this.state.list_name}
          onChange={this.handleListNameChange}
        /></h4>
      <h4><input
          type="text"
          placeholder="Add description.."
          value={this.state.list_description}
          onChange={this.handleDescriptionChange}
        /></h4>
      <h4><input
          type="text"
          placeholder="Created By ??"
          value={this.state.created_by}
          onChange={this.handleCreateByChange}
        /></h4>
     <h4><input
          type="text"
          placeholder="Due date??"
          value={this.state.due_date}
          onChange={this.handleDueDateChange}
        /></h4>
      <h4><input type="submit" value="Post" /></h4>
      </form>
    );
  }
});
var ListBox = React.createClass({
  loadListsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleListSubmit: function(list) {
    var lists = this.state.data;

    //console.log("#########");
    // Optimistically set an id on the new list. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    list.id = Date.now();
    var newLists = lists.concat([list]);
    this.setState({data: newLists});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: list,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: lists});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadListsFromServer();
    setInterval(this.loadListsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="listBox">
        <ListList data={this.state.data} />
        <ListForm onListSubmit={this.handleListSubmit} />
      </div>
    );
  }
});

var ListList = React.createClass({
  render: function() {

    //console.log(this.props.data);

    var listNodes = this.props.data.map(function(list) {
      

      return (
        <List list_name={list.list_name} key={list.id} list_number={list.id} list_description={list.list_description}
        create_date={list.create_date} due_date={list.due_date} created_by={list.created_by} >
        </List>
      );
    });
    return (
      <div className="listList">
        {listNodes}
      </div>
    );
  }
});

var ListForm = React.createClass({
  getInitialState: function() {
    return {list_name: ''};
  },
  handleListNameChange: function(e) {
    this.setState({list_name: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var list_name = this.state.list_name.trim();
    var list_description = "";
    var create_date = "";
    var due_date = "";
    var created_by = "";
    if (!list_name) {
      return;
    }
    this.props.onListSubmit({list_name: list_name, list_description: list_description, create_date: create_date,
                            due_date: due_date, created_by: created_by, csrfmiddlewaretoken: csrftoken});
    this.setState({list_name: ''});
  },
  render: function() {
    return (
      <form className="listForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Add a List.."
          value={this.state.list_name}
          onChange={this.handleListNameChange}
        />
      </form>
    );
  }
});

ReactDOM.render(
  <CardBox url={"/MyTrello/cards/" + boardid + "/"} pollInterval={2000} board_name={boardname} />,
  document.getElementById('board_content')
);
